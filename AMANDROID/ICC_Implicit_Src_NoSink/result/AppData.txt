Application Name: ICC_Implicit_Src_NoSink.apk
Uses Permissions: android.permission.READ_PHONE_STATE

Component com.ksu.implicit_src_nosink.FooActivity
  Component type: activity
  Exported: true
  Dynamic Registered: false
  Required Permission: 
  IntentFilters:
    IntentFilter:(Actions:["amandroid.impliciticctest_action.testaction"],Categories:["android.intent.category.DEFAULT"])

  Inter-component communication (ICC) Result:


Component com.ksu.implicit_src_nosink.MainActivity
  Component type: activity
  Exported: true
  Dynamic Registered: false
  Required Permission: 
  IntentFilters:
    IntentFilter:(Actions:["android.intent.action.MAIN"],Categories:["android.intent.category.LAUNCHER"])

  Inter-component communication (ICC) Result:
    ICC call details are listed below:
      Caller Procedure: Landroid/app/Activity;.startActivity:(Landroid/content/Intent;)V
      Caller Context: (onCreate,L02c32a)(envMain,L30)
      Outgoing Intents via this call:
        Intent:
          mActions:
            "amandroid.impliciticctest_action.testaction"
          ICC destinations:
            Target Component: com.ksu.implicit_src_nosink.FooActivity, Intent Type: IMPLICIT


Taint analysis result:
  Sources found:
    <Descriptors: api_source: Landroid/telephony/TelephonyManager?;.getDeviceId:()Ljava/lang/String; >
  Sinks found:
    <Descriptors: icc_sink: L02c32a 1>
  Discovered taint paths are listed below:
    TaintPath:
      Source: <Descriptors: api_source: Landroid/telephony/TelephonyManager?;.getDeviceId:()Ljava/lang/String; >
      Sink: <Descriptors: icc_sink: L02c32a 1>
      Types: vulnerability:information_leak
      The path consists of the following edges ("->"). The nodes have the context information (p1 to pn means which parameter). The source is at the top :
        Call@(onCreate,L02c32a)(envMain,L30)p1  ->
        VirtualBody@(onCreate,L02c30a)(envMain,L30)